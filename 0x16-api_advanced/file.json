{
    "kind": "Listing",
    "data": {
        "after": "t3_1dimpim",
        "dist": 10,
        "modhash": "",
        "geo_filter": "",
        "children": [
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "**Source code**: [https://github.com/ben-n93/beachwatch](https://github.com/ben-n93/beachwatch)\n\n  \n**What my Project Does**  \nIn NSW, Australia the government provides an API with daily updates on beaches' pollution and water quality forecast.\n\nI thought I'd make a simple wrapper in Python to make it easier to get data from the API.\n\n**Target Audience**  \nMost likely Australian data scientists/analysts/developers interested in beach data.",
                    "author_fullname": "t2_qlsr9p64h",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "I just made my first API wrapper: beachwatch",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1diovo8",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.89,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 53,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 53,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1718711880.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Source code&lt;/strong&gt;: &lt;a href=\"https://github.com/ben-n93/beachwatch\"&gt;https://github.com/ben-n93/beachwatch&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What my Project Does&lt;/strong&gt;&lt;br/&gt;\nIn NSW, Australia the government provides an API with daily updates on beaches&amp;#39; pollution and water quality forecast.&lt;/p&gt;\n\n&lt;p&gt;I thought I&amp;#39;d make a simple wrapper in Python to make it easier to get data from the API.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;br/&gt;\nMost likely Australian data scientists/analysts/developers interested in beach data.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/bLAtJmXWbtnFsefLwDGCkD2vGh_5bGCEWNE4tpCcb-A.jpg?auto=webp&amp;s=2908bbcbc561e2a64dfd57e506972b3067cde2c3",
                                    "width": 1200,
                                    "height": 600
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/bLAtJmXWbtnFsefLwDGCkD2vGh_5bGCEWNE4tpCcb-A.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=bfd5a2c76180047ce42abc17bb83767e8b95da64",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/bLAtJmXWbtnFsefLwDGCkD2vGh_5bGCEWNE4tpCcb-A.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=fdb778837e6bd91a7f6e981e9b9dca71aa0051f7",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/bLAtJmXWbtnFsefLwDGCkD2vGh_5bGCEWNE4tpCcb-A.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=7cafb8a7a8726eaf15ed7b03324d2ecfb66d3f15",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/bLAtJmXWbtnFsefLwDGCkD2vGh_5bGCEWNE4tpCcb-A.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a5ab36437c911e8d9aeed535b3d34066594b0902",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/bLAtJmXWbtnFsefLwDGCkD2vGh_5bGCEWNE4tpCcb-A.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=ea121a44de963e74d3165e76f5738c17b9f93fb3",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/bLAtJmXWbtnFsefLwDGCkD2vGh_5bGCEWNE4tpCcb-A.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=fe87cdb5d881c4a62738b03a3cb20ffdc297ee37",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "3zas1adqopBM5itJc70iN_yyaW3FGhaasrz1tk4zONk"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1diovo8",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Ok-Frosting7364",
                    "discussion_type": null,
                    "num_comments": 9,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1diovo8/i_just_made_my_first_api_wrapper_beachwatch/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1diovo8/i_just_made_my_first_api_wrapper_beachwatch/",
                    "subreddit_subscribers": 1243417,
                    "created_utc": 1718711880.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "**What My Project Does**\n\nWhile looking for task queues, I found that there are many options available in the Python ecosystem, making it really hard to choose the right one. To get a sense of how each library performs and to help make an informed decision, I conducted a load test on some of the most popular ones: Python-RQ, ARQ, Celery, Huey, and Dramatiq.\n\n**Target Audience**\n\nI hope my findings can help those who are also looking for a task queue solution in Python.\n\n**Comparison**\n\nMost articles out there seem to focus on comparing the features of these libraries but rarely discuss performance. While there could be a lot of improvements on my tests, I think it still provide some different insights into how each library handles heavy loads and concurrency.\n\n**Links:**\n\nYou can read  my findings\u00a0[on my blog](https://stevenyue.com/blogs/exploring-python-task-queue-libraries-with-load-test)\n\nCheck out the source code:\u00a0[on Github](https://github.com/steventen/python_queue_benchmark)\n\n  \nThanks",
                    "author_fullname": "t2_5fnv987o",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Load Tests Python Task Queues",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1digyfg",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.76,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 10,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 10,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1718681066.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;While looking for task queues, I found that there are many options available in the Python ecosystem, making it really hard to choose the right one. To get a sense of how each library performs and to help make an informed decision, I conducted a load test on some of the most popular ones: Python-RQ, ARQ, Celery, Huey, and Dramatiq.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I hope my findings can help those who are also looking for a task queue solution in Python.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Most articles out there seem to focus on comparing the features of these libraries but rarely discuss performance. While there could be a lot of improvements on my tests, I think it still provide some different insights into how each library handles heavy loads and concurrency.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You can read  my findings\u00a0&lt;a href=\"https://stevenyue.com/blogs/exploring-python-task-queue-libraries-with-load-test\"&gt;on my blog&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Check out the source code:\u00a0&lt;a href=\"https://github.com/steventen/python_queue_benchmark\"&gt;on Github&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Thanks&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1digyfg",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "tuple32",
                    "discussion_type": null,
                    "num_comments": 2,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1digyfg/load_tests_python_task_queues/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1digyfg/load_tests_python_task_queues/",
                    "subreddit_subscribers": 1243417,
                    "created_utc": 1718681066.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "**What's rug library:**\n\nLibrary for fetching various stock data from the internet (official and unofficial APIs).\n\n**Source code:**\n\nhttps://gitlab.com/imn1/rug\n\n**Releases including changelog:**\n\nhttps://gitlab.com/imn1/rug/-/releases",
                    "author_fullname": "t2_bolzb4n",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "rug 0.10.4 released",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "News"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "news",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1dilsv3",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.82,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 8,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "News",
                    "can_mod_post": false,
                    "score": 8,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1718699939.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What&amp;#39;s rug library:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Library for fetching various stock data from the internet (official and unofficial APIs).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Source code:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://gitlab.com/imn1/rug\"&gt;https://gitlab.com/imn1/rug&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Releases including changelog:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://gitlab.com/imn1/rug/-/releases\"&gt;https://gitlab.com/imn1/rug/-/releases&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/kGC2fMnWCpvF0AE0e0E3cd5yDsxWZ1n3_paN6UagQiE.jpg?auto=webp&amp;s=3ac6593788a26f81542b8a0ae2673e0448479cfc",
                                    "width": 1024,
                                    "height": 1024
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/kGC2fMnWCpvF0AE0e0E3cd5yDsxWZ1n3_paN6UagQiE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=bd76e678fd465ce2e15977b45a95072bc95e7500",
                                        "width": 108,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/kGC2fMnWCpvF0AE0e0E3cd5yDsxWZ1n3_paN6UagQiE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d2c4ba7a3b4a75a117414c84eb96cf130548c811",
                                        "width": 216,
                                        "height": 216
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/kGC2fMnWCpvF0AE0e0E3cd5yDsxWZ1n3_paN6UagQiE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=c1b4cb342314de21cd815c647f66fd790b54e17a",
                                        "width": 320,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/kGC2fMnWCpvF0AE0e0E3cd5yDsxWZ1n3_paN6UagQiE.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=505ad6e4c529686b12a7646aceda3bc53037adb0",
                                        "width": 640,
                                        "height": 640
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/kGC2fMnWCpvF0AE0e0E3cd5yDsxWZ1n3_paN6UagQiE.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=c7d0db57977f727b9de9832da86ab11ba8dc845c",
                                        "width": 960,
                                        "height": 960
                                    }
                                ],
                                "variants": {},
                                "id": "Vw3bBu31aiMSJTxYckiYR6DzhREt281xzPoVcP66tdI"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#7193ff",
                    "id": "1dilsv3",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "n1___",
                    "discussion_type": null,
                    "num_comments": 0,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1dilsv3/rug_0104_released/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1dilsv3/rug_0104_released/",
                    "subreddit_subscribers": 1243417,
                    "created_utc": 1718699939.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "[https://www.gauge.sh/blog/parsing-python-asts-20x-faster-with-rust](https://www.gauge.sh/blog/parsing-python-asts-20x-faster-with-rust)\n\n",
                    "author_fullname": "t2_jtyw9",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Parsing Python ASTs 20x faster with Rust",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "News"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "news",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1div2e8",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.73,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 5,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "News",
                    "can_mod_post": false,
                    "score": 5,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1718728578.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://www.gauge.sh/blog/parsing-python-asts-20x-faster-with-rust\"&gt;https://www.gauge.sh/blog/parsing-python-asts-20x-faster-with-rust&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/if91EjJeKDTyPRM8PyApubAZvOZ22uPU0cIGQRWtBBw.jpg?auto=webp&amp;s=160d83e62a4cb5d41e7d1ceee74c9044d06da8d5",
                                    "width": 2578,
                                    "height": 1059
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/if91EjJeKDTyPRM8PyApubAZvOZ22uPU0cIGQRWtBBw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=34c007f77ce2c7c2fbd4a6e620ca56598d4ae999",
                                        "width": 108,
                                        "height": 44
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/if91EjJeKDTyPRM8PyApubAZvOZ22uPU0cIGQRWtBBw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=cd28c12bf850460016bf4d7aebaeb8a2f55f5129",
                                        "width": 216,
                                        "height": 88
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/if91EjJeKDTyPRM8PyApubAZvOZ22uPU0cIGQRWtBBw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=8ac786d128220a29690b328fa9b0e79926ac9b3c",
                                        "width": 320,
                                        "height": 131
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/if91EjJeKDTyPRM8PyApubAZvOZ22uPU0cIGQRWtBBw.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=489c18a519969c1c9db1ad19eb34cf4a43477f69",
                                        "width": 640,
                                        "height": 262
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/if91EjJeKDTyPRM8PyApubAZvOZ22uPU0cIGQRWtBBw.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=1fc461bc06c2c42dbcba544f179e497955e9068b",
                                        "width": 960,
                                        "height": 394
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/if91EjJeKDTyPRM8PyApubAZvOZ22uPU0cIGQRWtBBw.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=312c634a62f23d4a236cf40a888c39d045678f35",
                                        "width": 1080,
                                        "height": 443
                                    }
                                ],
                                "variants": {},
                                "id": "T5z75_bzUvJepBJHJzEqpSvSr7EhduFd0jVZzQrP71U"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#7193ff",
                    "id": "1div2e8",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "the1024",
                    "discussion_type": null,
                    "num_comments": 0,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1div2e8/parsing_python_asts_20x_faster_with_rust/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1div2e8/parsing_python_asts_20x_faster_with_rust/",
                    "subreddit_subscribers": 1243417,
                    "created_utc": 1718728578.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "End goal is to produce PDF using external data and a template. Needs to support Jinja tags, conditionals and loops.\n\nUsing [https://github.com/Kozea/WeasyPrint](https://github.com/Kozea/WeasyPrint) and [https://github.com/pallets/jinja](https://github.com/pallets/jinja) as base stack (Open to other suggestions)\n\nI was thinking of building some base HTML templates but would be awesome if I could find a visual HTML editor that could produce code 100% compatible with Weasyprint so that end users can build templates by themselves or modify existing ones.\n\nCould be Wysiwyg based using [https://editorjs.io](https://editorjs.io) or [https://github.com/slab/quill](https://github.com/slab/quill)  \nor more advanced web builders like [https://github.com/GrapesJS/grapesjs](https://github.com/GrapesJS/grapesjs)\n\nAnybody built something similar?",
                    "author_fullname": "t2_nhwn0",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Looking for a good WYZIWIG/visual editor to go with with Jinja + Weasyprint",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Discussion"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "discussion",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1diqpcb",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.75,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 2,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Discussion",
                    "can_mod_post": false,
                    "score": 2,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": 1718730503.0,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1718717335.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;End goal is to produce PDF using external data and a template. Needs to support Jinja tags, conditionals and loops.&lt;/p&gt;\n\n&lt;p&gt;Using &lt;a href=\"https://github.com/Kozea/WeasyPrint\"&gt;https://github.com/Kozea/WeasyPrint&lt;/a&gt; and &lt;a href=\"https://github.com/pallets/jinja\"&gt;https://github.com/pallets/jinja&lt;/a&gt; as base stack (Open to other suggestions)&lt;/p&gt;\n\n&lt;p&gt;I was thinking of building some base HTML templates but would be awesome if I could find a visual HTML editor that could produce code 100% compatible with Weasyprint so that end users can build templates by themselves or modify existing ones.&lt;/p&gt;\n\n&lt;p&gt;Could be Wysiwyg based using &lt;a href=\"https://editorjs.io\"&gt;https://editorjs.io&lt;/a&gt; or &lt;a href=\"https://github.com/slab/quill\"&gt;https://github.com/slab/quill&lt;/a&gt;&lt;br/&gt;\nor more advanced web builders like &lt;a href=\"https://github.com/GrapesJS/grapesjs\"&gt;https://github.com/GrapesJS/grapesjs&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Anybody built something similar?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/MrR6XEbvkwoaKHVb4pubBfi8ihgJHV-GqHwjpfh_aME.jpg?auto=webp&amp;s=bac0a6904ad30d910ba76e9c5cb9929b8e1cadad",
                                    "width": 898,
                                    "height": 436
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/MrR6XEbvkwoaKHVb4pubBfi8ihgJHV-GqHwjpfh_aME.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=ff9311c9adc917422680dc4749af0541d79496b9",
                                        "width": 108,
                                        "height": 52
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/MrR6XEbvkwoaKHVb4pubBfi8ihgJHV-GqHwjpfh_aME.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=1850db984b78ed128e0e02c5973f2d722c634768",
                                        "width": 216,
                                        "height": 104
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/MrR6XEbvkwoaKHVb4pubBfi8ihgJHV-GqHwjpfh_aME.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=f2a51087e4e0e3e43b0ac22ce2e38dddb32b56af",
                                        "width": 320,
                                        "height": 155
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/MrR6XEbvkwoaKHVb4pubBfi8ihgJHV-GqHwjpfh_aME.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=174c02bf8773a0e317cb2b4392df1e0904ab2101",
                                        "width": 640,
                                        "height": 310
                                    }
                                ],
                                "variants": {},
                                "id": "qUfRlnMLJqP9d55qVTG8skzA1u_PcWJtoLGpsz5Cpj4"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#f50057",
                    "id": "1diqpcb",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Benoss",
                    "discussion_type": null,
                    "num_comments": 2,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1diqpcb/looking_for_a_good_wyziwigvisual_editor_to_go/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1diqpcb/looking_for_a_good_wyziwigvisual_editor_to_go/",
                    "subreddit_subscribers": 1243417,
                    "created_utc": 1718717335.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "I'm going to show you how to get Scrapegraph AI up and running, how to set up a language model, how to process JSON, scrape websites, use different AI models, and even turning your data into audio. Sounds like a lot, but it's easier than you think, and I'll walk you through it step by step.\n\n[https://www.scrapingbee.com/blog/scrapegraph-ai-tutorial-scrape-websites-easily-with-llama-ai/](https://www.scrapingbee.com/blog/scrapegraph-ai-tutorial-scrape-websites-easily-with-llama-ai/)",
                    "author_fullname": "t2_rrrac",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Scrapegraph AI Tutorial; Scrape Websites Easily With LLaMA AI",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Tutorial"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "tutorial",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1dip146",
                    "quarantine": false,
                    "link_flair_text_color": "dark",
                    "upvote_ratio": 0.63,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 2,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Tutorial",
                    "can_mod_post": false,
                    "score": 2,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1718712359.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m going to show you how to get Scrapegraph AI up and running, how to set up a language model, how to process JSON, scrape websites, use different AI models, and even turning your data into audio. Sounds like a lot, but it&amp;#39;s easier than you think, and I&amp;#39;ll walk you through it step by step.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.scrapingbee.com/blog/scrapegraph-ai-tutorial-scrape-websites-easily-with-llama-ai/\"&gt;https://www.scrapingbee.com/blog/scrapegraph-ai-tutorial-scrape-websites-easily-with-llama-ai/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/-Aj-1SHEjaMz6oPEgZgNdvczMs4r5vXfCmGiTKBSFf8.jpg?auto=webp&amp;s=8f31205e062505333ac70584499718185d981e3a",
                                    "width": 1200,
                                    "height": 628
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/-Aj-1SHEjaMz6oPEgZgNdvczMs4r5vXfCmGiTKBSFf8.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=58350058af5561813ab2427e3e73cd44d3dddc7c",
                                        "width": 108,
                                        "height": 56
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/-Aj-1SHEjaMz6oPEgZgNdvczMs4r5vXfCmGiTKBSFf8.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=e7fc6fc9fde83d52bc7728cd79c8bce97ab33851",
                                        "width": 216,
                                        "height": 113
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/-Aj-1SHEjaMz6oPEgZgNdvczMs4r5vXfCmGiTKBSFf8.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=79372d00ca8c901b84e728c2500e1595fefd4100",
                                        "width": 320,
                                        "height": 167
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/-Aj-1SHEjaMz6oPEgZgNdvczMs4r5vXfCmGiTKBSFf8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=6960d1fe39df91ea05c0cb22581d25d7df9614ab",
                                        "width": 640,
                                        "height": 334
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/-Aj-1SHEjaMz6oPEgZgNdvczMs4r5vXfCmGiTKBSFf8.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=fe92461dbae4d78bb6331c59a5abee6819a7559a",
                                        "width": 960,
                                        "height": 502
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/-Aj-1SHEjaMz6oPEgZgNdvczMs4r5vXfCmGiTKBSFf8.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=67aa4281e4114e015d1befe0b6613b1a0f5d19d1",
                                        "width": 1080,
                                        "height": 565
                                    }
                                ],
                                "variants": {},
                                "id": "aaNVrcMLEQHfuJo78pRNFfw8LBIFHZlnUjqDEiAkyOg"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#dadada",
                    "id": "1dip146",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "INSERT_KEYWORD",
                    "discussion_type": null,
                    "num_comments": 0,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1dip146/scrapegraph_ai_tutorial_scrape_websites_easily/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1dip146/scrapegraph_ai_tutorial_scrape_websites_easily/",
                    "subreddit_subscribers": 1243417,
                    "created_utc": 1718712359.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "# Weekly Wednesday Thread: Advanced Questions \ud83d\udc0d\n\nDive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.\n\n## How it Works:\n\n1. **Ask Away**: Post your advanced Python questions here.\n2. **Expert Insights**: Get answers from experienced developers.\n3. **Resource Pool**: Share or discover tutorials, articles, and tips.\n\n## Guidelines:\n\n* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.\n* Questions that are not advanced may be removed and redirected to the appropriate thread.\n\n## Recommended Resources:\n\n* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.\n\n## Example Questions:\n\n1. **How can you implement a custom memory allocator in Python?**\n2. **What are the best practices for optimizing Cython code for heavy numerical computations?**\n3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**\n4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**\n5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**\n6. **What are some advanced use-cases for Python's decorators?**\n7. **How can you achieve real-time data streaming in Python with WebSockets?**\n8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**\n9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**\n10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**\n\nLet's deepen our Python knowledge together. Happy coding! \ud83c\udf1f",
                    "author_fullname": "t2_6l4z3",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Tuesday Daily Thread: Advanced questions",
                    "link_flair_richtext": [
                        {
                            "a": ":pythonLogo:",
                            "e": "emoji",
                            "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                        },
                        {
                            "e": "text",
                            "t": " Daily Thread"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "daily-thread",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1dicxw6",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.75,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 2,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": ":pythonLogo: Daily Thread",
                    "can_mod_post": false,
                    "score": 2,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": true,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1718668808.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Wednesday Thread: Advanced Questions \ud83d\udc0d&lt;/h1&gt;\n\n&lt;p&gt;Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Ask Away&lt;/strong&gt;: Post your advanced Python questions here.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Expert Insights&lt;/strong&gt;: Get answers from experienced developers.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Resource Pool&lt;/strong&gt;: Share or discover tutorials, articles, and tips.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is for &lt;strong&gt;advanced questions only&lt;/strong&gt;. Beginner questions are welcome in our &lt;a href=\"#daily-beginner-thread-link\"&gt;Daily Beginner Thread&lt;/a&gt; every Thursday.&lt;/li&gt;\n&lt;li&gt;Questions that are not advanced may be removed and redirected to the appropriate thread.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Recommended Resources:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you don&amp;#39;t receive a response, consider exploring &lt;a href=\"/r/LearnPython\"&gt;r/LearnPython&lt;/a&gt; or join the &lt;a href=\"https://discord.gg/python\"&gt;Python Discord Server&lt;/a&gt; for quicker assistance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Questions:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;How can you implement a custom memory allocator in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for optimizing Cython code for heavy numerical computations?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do you set up a multi-threaded architecture using Python&amp;#39;s Global Interpreter Lock (GIL)?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How would you go about implementing a distributed task queue using Celery and RabbitMQ?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are some advanced use-cases for Python&amp;#39;s decorators?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How can you achieve real-time data streaming in Python with WebSockets?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Best practices for securing a Flask (or similar) REST API with OAuth 2.0?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s deepen our Python knowledge together. Happy coding! \ud83c\udf1f&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?auto=webp&amp;s=77877e508cacc3a5c51009b26cc51fd08031ca76",
                                    "width": 512,
                                    "height": 288
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c5fbdf8efb5e6f14fe03845466b74ba9ebab4413",
                                        "width": 108,
                                        "height": 60
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d57848912389eb70e32659895710a7c322a93edf",
                                        "width": 216,
                                        "height": 121
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=86d869d6c6e16a13c5cf960ab69d7d274b49ff16",
                                        "width": 320,
                                        "height": 180
                                    }
                                ],
                                "variants": {},
                                "id": "aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": "moderator",
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#00a6a5",
                    "id": "1dicxw6",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "AutoModerator",
                    "discussion_type": null,
                    "num_comments": 0,
                    "send_replies": false,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1dicxw6/tuesday_daily_thread_advanced_questions/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": true,
                    "url": "https://www.reddit.com/r/Python/comments/1dicxw6/tuesday_daily_thread_advanced_questions/",
                    "subreddit_subscribers": 1243417,
                    "created_utc": 1718668808.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "Article: [Unrestricted Resource Consumption - Web API Security Champion](https://devsec-blog.com/2024/06/unrestricted-resource-consumption-in-a-password-reset-web-api-security-champion-part-iv/)\n\nThe article presents one of the most common Web API security risks with an example vulnerability in the password reset. It provides the recommendations and an example fix with unit test which can be used as a guide to prevent similar vulnerabilities in APIs.",
                    "author_fullname": "t2_8sxrfcis",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Unrestricted Resource Consumption API Vulnerability Class",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Resource"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "resource",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1divkx6",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.5,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 0,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Resource",
                    "can_mod_post": false,
                    "score": 0,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1718729876.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Article: &lt;a href=\"https://devsec-blog.com/2024/06/unrestricted-resource-consumption-in-a-password-reset-web-api-security-champion-part-iv/\"&gt;Unrestricted Resource Consumption - Web API Security Champion&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The article presents one of the most common Web API security risks with an example vulnerability in the password reset. It provides the recommendations and an example fix with unit test which can be used as a guide to prevent similar vulnerabilities in APIs.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/TnE9GthUBSSHrSCQ8XwZ_n9VaXQbuyxDH0t7-rUriKE.jpg?auto=webp&amp;s=ee084dca88654b1d279d3fc665af64aa8fde8d6b",
                                    "width": 1910,
                                    "height": 825
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/TnE9GthUBSSHrSCQ8XwZ_n9VaXQbuyxDH0t7-rUriKE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=ee27770289bd4356a39d0fa8d5fd16e42538ee21",
                                        "width": 108,
                                        "height": 46
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/TnE9GthUBSSHrSCQ8XwZ_n9VaXQbuyxDH0t7-rUriKE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2cb4191c341422cb0926a423b2547c16d53bd4e3",
                                        "width": 216,
                                        "height": 93
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/TnE9GthUBSSHrSCQ8XwZ_n9VaXQbuyxDH0t7-rUriKE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=c5a35392f27fac43ed00019df7765e2b6116dd0f",
                                        "width": 320,
                                        "height": 138
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/TnE9GthUBSSHrSCQ8XwZ_n9VaXQbuyxDH0t7-rUriKE.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=08ce0b55c575af4d3168d4379f274579d20ba8c6",
                                        "width": 640,
                                        "height": 276
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/TnE9GthUBSSHrSCQ8XwZ_n9VaXQbuyxDH0t7-rUriKE.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=0850eac81ecca32aa4c08668ddd2a422b73f8410",
                                        "width": 960,
                                        "height": 414
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/TnE9GthUBSSHrSCQ8XwZ_n9VaXQbuyxDH0t7-rUriKE.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=1b14d3ccece976569c1697af27b2baaaa2c10d77",
                                        "width": 1080,
                                        "height": 466
                                    }
                                ],
                                "variants": {},
                                "id": "dvb3fp79NUAH6FD4Ak0uxcmsr1XnvXImSOMraIGXHEk"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ddbd37",
                    "id": "1divkx6",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "theowni",
                    "discussion_type": null,
                    "num_comments": 0,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1divkx6/unrestricted_resource_consumption_api/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1divkx6/unrestricted_resource_consumption_api/",
                    "subreddit_subscribers": 1243417,
                    "created_utc": 1718729876.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "Linting is essential to writing clean and readable code to share with others. A linter, like Ruff, is a tool that analyzes your code and looks for errors, stylistic issues, and suspicious constructs. Linting allows you to address issues and improve your code quality before you commit your code and share it with others.\n\nRuff is a modern linter that\u2019s extremely fast and has a simple interface, making it straightforward to use. It also aims to be a drop-in replacement for many other linting and formatting tools, such as Flake8, isort, and Black. It\u2019s quickly becoming one of the most popular Python linters.\n    \n    \n## Installing Ruff\nNow that you know why linting your code is important and how Ruff is a powerful tool for the job, it\u2019s time to install it. Thankfully, Ruff works out of the box, so no complicated installation instructions or configurations are needed to start using it.\n    \nAssuming your project is already set up with a virtual environment, you can install Ruff in the following ways:\n    \n    ```bash\n    $ python -m pip install ruff\n    ```\n    \n    You can check that Ruff installed correctly by using the ruff version command:\n    \n    ```bash\n    $ ruff version\n    ruff 0.4.7\n    ```\n    \n## Linting Your Python Code\nWhile linting helps keep your code consistent and error-free, it doesn\u2019t guarantee that your code will be bug-free. Finding the bugs in your code is best handled with a debugger and adequate testing, which won\u2019t be covered in this tutorial. Coming up in the next sections, you\u2019ll learn how to use Ruff to check for errors and speed up your workflow.\n    \n### Checking for Errors\n    \n    ```bash\n    $ ruff check\n    one_ring.py:1:8: F401 [*] `os` imported but unused\n    one_ring.py:10:12: F821 Undefined name `name`\n    Found 2 errors.\n    [*] 1 fixable with the `--fix` option.\n    ```\n    \nSuccess! Ruff found two errors. Not only does it show the file and line numbers of the errors, but it also gives you error codes and messages. In addition, it lets you know that one of the two errors is fixable. Great!\n    \nYou can tell Ruff to fix errors by applying the --fix flag. Here\u2019s what happens when you follow its suggestion:\n    \n    ```bash\n    $ ruff check --fix\n    one_ring.py:9:12: F821 Undefined name `name`\n    Found 2 errors (1 fixed, 1 remaining).\n    ```\n    \nYou can find the rest of this Free tutorial [here](https://realpython.com/ruff-python/)",
                    "author_fullname": "t2_cunk2c1e",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Ruff: A Modern Python Linter for Error-Free and Maintainable Code",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Tutorial"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "tutorial",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1disz53",
                    "quarantine": false,
                    "link_flair_text_color": "dark",
                    "upvote_ratio": 0.24,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 0,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Tutorial",
                    "can_mod_post": false,
                    "score": 0,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1718723301.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Linting is essential to writing clean and readable code to share with others. A linter, like Ruff, is a tool that analyzes your code and looks for errors, stylistic issues, and suspicious constructs. Linting allows you to address issues and improve your code quality before you commit your code and share it with others.&lt;/p&gt;\n\n&lt;p&gt;Ruff is a modern linter that\u2019s extremely fast and has a simple interface, making it straightforward to use. It also aims to be a drop-in replacement for many other linting and formatting tools, such as Flake8, isort, and Black. It\u2019s quickly becoming one of the most popular Python linters.&lt;/p&gt;\n\n&lt;h2&gt;Installing Ruff&lt;/h2&gt;\n\n&lt;p&gt;Now that you know why linting your code is important and how Ruff is a powerful tool for the job, it\u2019s time to install it. Thankfully, Ruff works out of the box, so no complicated installation instructions or configurations are needed to start using it.&lt;/p&gt;\n\n&lt;p&gt;Assuming your project is already set up with a virtual environment, you can install Ruff in the following ways:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;```bash\n$ python -m pip install ruff\n```\n\nYou can check that Ruff installed correctly by using the ruff version command:\n\n```bash\n$ ruff version\nruff 0.4.7\n```\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Linting Your Python Code&lt;/h2&gt;\n\n&lt;p&gt;While linting helps keep your code consistent and error-free, it doesn\u2019t guarantee that your code will be bug-free. Finding the bugs in your code is best handled with a debugger and adequate testing, which won\u2019t be covered in this tutorial. Coming up in the next sections, you\u2019ll learn how to use Ruff to check for errors and speed up your workflow.&lt;/p&gt;\n\n&lt;h3&gt;Checking for Errors&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;```bash\n$ ruff check\none_ring.py:1:8: F401 [*] `os` imported but unused\none_ring.py:10:12: F821 Undefined name `name`\nFound 2 errors.\n[*] 1 fixable with the `--fix` option.\n```\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Success! Ruff found two errors. Not only does it show the file and line numbers of the errors, but it also gives you error codes and messages. In addition, it lets you know that one of the two errors is fixable. Great!&lt;/p&gt;\n\n&lt;p&gt;You can tell Ruff to fix errors by applying the --fix flag. Here\u2019s what happens when you follow its suggestion:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;```bash\n$ ruff check --fix\none_ring.py:9:12: F821 Undefined name `name`\nFound 2 errors (1 fixed, 1 remaining).\n```\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can find the rest of this Free tutorial &lt;a href=\"https://realpython.com/ruff-python/\"&gt;here&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#dadada",
                    "id": "1disz53",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "ajpinedam",
                    "discussion_type": null,
                    "num_comments": 12,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1disz53/ruff_a_modern_python_linter_for_errorfree_and/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1disz53/ruff_a_modern_python_linter_for_errorfree_and/",
                    "subreddit_subscribers": 1243417,
                    "created_utc": 1718723301.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "I was wondering recently about any startup and any coding language that how does they make money. So I was curious to know about Python which is widely used \n",
                    "author_fullname": "t2_upmshiw4",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "How does Python earn money? What would have been their business model?",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Discussion"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "discussion",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1dimpim",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.31,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 0,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Discussion",
                    "can_mod_post": false,
                    "score": 0,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1718703859.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I was wondering recently about any startup and any coding language that how does they make money. So I was curious to know about Python which is widely used &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": false,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#f50057",
                    "id": "1dimpim",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Civil-Captain5676",
                    "discussion_type": null,
                    "num_comments": 24,
                    "send_replies": true,
                    "whitelist_status": "all_ads",
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1dimpim/how_does_python_earn_money_what_would_have_been/",
                    "parent_whitelist_status": "all_ads",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1dimpim/how_does_python_earn_money_what_would_have_been/",
                    "subreddit_subscribers": 1243417,
                    "created_utc": 1718703859.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            }
        ],
        "before": null
    }
}
